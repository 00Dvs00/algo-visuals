import{r as x,j as t}from"./index-DO2szRq0.js";import{S as W,L as S,c as $}from"./StepVisualization-BVFlbeNv.js";const K=()=>{const[I,O]=x.useState("1,2,3,4,3,2,1"),[q,H]=x.useState(null),[p,j]=x.useState(0),[w,_]=x.useState([]),[A,L]=x.useState(!1),[z,C]=x.useState(!0),E=i=>{const r=[];let d=0,b=[],M=new Set,k=i;for(;k;)b.push(k.val),k=k.next;const m=b.length;let R=!0;if(m<=1)return r.push({id:d++,description:"Initial linked list. List has 0 or 1 element, so it's a palindrome.",list:i,pointers:{},highlightNodes:[],code:`boolean isPalindrome(ListNode head) {
    if (head == null || head.next == null) 
        return true;`,reccurse:!1,finalResult:!0}),C(!0),r;r.push({id:d++,description:"Initial linked list - checking if it's a palindrome",list:i,pointers:{},highlightNodes:[],code:`boolean isPalindrome(ListNode head) {
    if (head == null || head.next == null) 
        return true;`,reccurse:!1}),r.push({id:d++,description:"Initialize slow and fast pointers to find the middle",list:i,pointers:{"slow , fast":0},highlightNodes:[0],code:`ListNode slow = head;
ListNode fast = head;`,reccurse:!1});let h=0,v=0;for(;v<m&&v+1<m;)h++,v+=2,r.push({id:d++,description:`Moving pointers: slow at index ${h}, fast at index ${Math.min(v,m-1)}`,list:i,pointers:{slow:h,fast:Math.min(v,m-1)},highlightNodes:[h,Math.min(v,m-1)],code:`while (fast != null && fast.next != null) {
    slow = slow.next;
    fast = fast.next.next;
}`,reccurse:!1});r.push({id:d++,description:`Middle identified. Node at index ${h} helps determine the split. Now reversing the second half.`,list:i,pointers:{middle:h},highlightNodes:[h],code:`// Middle found (slow pointer is at middle or start of second half).
// Now reverse the second half of the list.
ListNode secondHalfStartNode = (fast == null) ? slow : slow.next;
ListNode secondHalfReversed = reverseLinkedList(secondHalfStartNode);`,reccurse:!1});let y,a;m%2===0?(y=b.slice(0,h),a=b.slice(h)):(y=b.slice(0,h),a=b.slice(h+1));function N({type:c,i:e,currentVal:s,nextVal:n,prevVal:l}){const u=new Array(a.length).fill(!0),f={id:d++,list:i,list2:$(a),pointers:{},pointers2:{},highlightNodes:[],highlightNodes2:[],reccurse:!0,iteration:e+1,reversalPhase:c},g=new Array(a.length).fill("normal");switch(M.forEach(D=>{D<g.length&&(g[D]="reverse")}),c){case"Initialize":Object.assign(f,{description:"Initialize Pointers : Prev = null , Current = head, next = head.",pointers2:{prev:null,"current, next":e},highlightNodes2:[e],arrowDirection:g,code:"next = current.next;",code2:`// Storing: next = ${n||"null"}`});break;case"store_next":Object.assign(f,{description:`Iteration ${e+1}a: Store next pointer before breaking the link.`,pointers2:{prev:e>0?e-1:null,current:e,next:n?e+1:null,storing:!0},highlightNodes2:[e,...n?[e+1]:[]],arrowDirection:g,code:"next = current.next;",code2:`// Storing: next = ${n||"null"}`});break;case"break_link":u[e]=!1,Object.assign(f,{description:`Iteration ${e+1}b: Break the current link (remove arrow from ${s}).`,pointers2:{prev:e>0?e-1:null,current:e,next:n?e+1:null,breaking:!0},highlightNodes2:[e],showArrow:u,arrowDirection:g,code:"// About to break: current.next",code2:`// Breaking link from ${s} to ${n||"null"}`});break;case"reverse_link":M.add(e),g[e]="reverse",Object.assign(f,{description:`Iteration ${e+1}b: Reverse link.`,pointers2:{prev:e>0?e-1:null,current:e,next:n?e+1:null,reversing:!0},highlightNodes2:[e,...l?[e-1]:[]],showArrow:u,arrowDirection:g,code:"current.next = prev;",code2:`// Reversing: ${s}.next = ${l||"null"}`});break;case"move_prev":Object.assign(f,{description:`Iteration ${e+1}c: Move prev pointer forward.`,pointers2:{prev:e,current:e,next:n?e+1:null,movingPrev:!0},highlightNodes2:[e],arrowDirection:g,code:"prev = current;",code2:`// prev = ${s}`});break;case"move_current":Object.assign(f,{description:`Iteration ${e+1}d: Move current pointer forward.`,pointers2:{prev:e,current:n?e+1:null,next:n?e+1:null,movingCurrent:!0},highlightNodes2:n?[e+1]:[],arrowDirection:g});break}return f}function F(c,e,s,n){const l=e===s;return{id:d++,description:`Compare node ${c+1}: ${e} ${l?"==":"!="} ${s}`,list:i,list2:n,pointers:{first:c},pointers2:{second:c},highlightNodes:[c],highlightNodes2:[c],code:`if (${e} != ${s}) return false;`,code2:`// Comparison ${c+1}: ${e} ${l?"MATCH":"MISMATCH"}`,reccurse:!0,comparisonResult:l,comparisonIndex:c+1}}if(a.length>0){r.push(N({type:"Initialize",i:0,currentVal:a[0],nextVal:null,prevVal:null}));for(let s=0;s<a.length;s++){const n=a[s],l=a[s+1]||null,u=a[s-1]||null;r.push(N({type:"store_next",i:s,currentVal:n,nextVal:l,prevVal:u})),r.push(N({type:"break_link",i:s,currentVal:n,nextVal:l,prevVal:u})),r.push(N({type:"reverse_link",i:s,currentVal:n,nextVal:l,prevVal:u})),r.push(N({type:"move_prev",i:s,currentVal:n,nextVal:l,prevVal:u})),r.push(N({type:"move_current",i:s,currentVal:n,nextVal:l,prevVal:u}))}const c=$([...a].reverse()),e=[...a].reverse();for(let s=0;s<y.length;s++){const n=y[s],l=e[s],u=F(s,n,l,c);if(r.push(u),!u.comparisonResult)break}}return r.push({id:d++,description:`Algorithm complete! 
                 Final result: List is PALINDROME
                 All comparisons matched!`,list:i,pointers:{},highlightNodes:[],reccurse:!1,finalResult:R}),C(R),r},P=()=>{const i=I.split(",").map(d=>parseInt(d.trim())).filter(d=>!isNaN(d)),r=$(i);H(r),_(E(r)),j(0),L(!1)},B=()=>{p<w.length-1&&j(p+1)},T=()=>{p>0&&j(p-1)},V=()=>{L(!0);const i=setInterval(()=>{j(r=>r>=w.length-1?(L(!1),clearInterval(i),r):r+1)},2e3)};x.useEffect(()=>{P()},[]);const o=w[p]||{};return t.jsx("div",{className:"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 p-6",children:t.jsxs("div",{className:"max-w-7xl mx-auto",children:[t.jsxs("div",{className:"text-center mb-8",children:[t.jsx("h1",{className:"text-4xl font-bold text-gray-800 mb-2",children:"Palindrome Linked List Visualizer"}),t.jsx("p",{className:"text-lg text-gray-600",children:"Watch how the algorithm determines if a linked list is a palindrome"})]}),t.jsx("div",{className:"bg-white rounded-xl shadow-lg p-6 mb-6",children:t.jsxs("div",{className:"flex flex-wrap items-center gap-4 justify-center",children:[t.jsxs("div",{className:"flex items-center gap-2",children:[t.jsx("label",{className:"text-sm font-medium text-gray-700",children:"Input Values:"}),t.jsx("input",{type:"text",value:I,onChange:i=>O(i.target.value),placeholder:"Enter comma-separated values",className:"px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-200 w-64"})]}),t.jsxs("div",{className:"flex gap-2",children:[t.jsx("button",{onClick:P,className:"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 font-medium",children:"Create List"}),t.jsx("button",{onClick:T,disabled:p===0,className:"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200 font-medium",children:"Previous"}),t.jsx("button",{onClick:B,disabled:p>=w.length-1,className:"px-4 py-2 bg-gray-600 text-white rounded-lg hover:bg-gray-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200 font-medium",children:"Next"}),t.jsx("button",{onClick:V,disabled:A,className:"px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 disabled:bg-green-300 disabled:cursor-not-allowed transition-colors duration-200 font-medium",children:A?"Playing...":"Play Animation"})]})]})}),t.jsx(W,{currentStep:p,steps:w,currentStepData:o,isPalindrome:z}),t.jsxs("div",{className:"bg-white rounded-xl shadow-lg p-6 mb-6",children:[t.jsx("h4",{className:"text-xl font-semibold text-gray-800 mb-4",children:"Linked List Visualization"}),o.reccurse?t.jsxs("div",{className:"grid md:grid-cols-2 gap-6",children:[t.jsxs("div",{className:"bg-blue-50 rounded-lg p-4",children:[t.jsx("h5",{className:"text-lg font-medium text-blue-800 mb-3",children:"Original List"}),t.jsx(S,{list:o.list,highlightNodes:o.highlightNodes,pointers:o.pointers})]}),t.jsxs("div",{className:"bg-green-50 rounded-lg p-4",children:[t.jsx("h5",{className:"text-lg font-medium text-green-800 mb-3",children:"Reversing Second Half"}),t.jsx(S,{list:o.list2,highlightNodes:o.highlightNodes2,pointers:o.pointers2,arrowDirection:o.arrowDirection,showArrow:o.showArrow})]})]}):t.jsx("div",{className:"bg-gray-50 rounded-lg p-4",children:t.jsx(S,{list:o.list,highlightNodes:o.highlightNodes,pointers:o.pointers})})]})]})})};export{K as default};
